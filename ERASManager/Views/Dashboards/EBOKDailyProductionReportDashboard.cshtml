
@{
    ViewBag.Title = "EBOKDailyProductionReportDashboard";

}

@section pagecss
            {
    <!-- chartist CSS -->
    <link href="~/Content/assets/plugins/chartist-js/dist/chartist.min.css" rel="stylesheet">
    <link href="~/Content/assets/plugins/chartist-js/dist/chartist-init.css" rel="stylesheet">
    <link href="~/Content/assets/plugins/chartist-plugin-tooltip-master/dist/chartist-plugin-tooltip.css" rel="stylesheet">
    <!-- Custom CSS -->
}



<!-- Page wrapper  -->
<!-- ============================================================== -->
<div class="page-wrapper">
    <!-- ============================================================== -->
    <!-- Bread crumb and right sidebar toggle -->
    <!-- ============================================================== -->
    <div class="row page-titles">
        <div class="col-md-5 align-self-center">
            <h3 class="text-themecolor">EBOK Daily Well Indicator &Aacute; Production Report</h3>
        </div>
        <div class="col-md-7 align-self-center">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="javascript:void(0)">Home</a></li>
                <li class="breadcrumb-item">EBOK Daily Production Report </li>
                <li class="breadcrumb-item active">Dashboard</li>
            </ol>
        </div>
        <div class="">
            <button class="right-side-toggle waves-effect waves-light btn-inverse btn btn-circle btn-sm pull-right m-l-10"><i class="ti-settings text-white"></i></button>
        </div>
    </div>
    <!-- ============================================================== -->
    <!-- End Bread crumb and right sidebar toggle -->
    <!-- ============================================================== -->
    <!-- ============================================================== -->
    <!-- Container fluid  -->
    <!-- ============================================================== -->
    <div class="container-fluid">

        <!-- ============================================================== -->
        <!-- Start Page Content -->
        <!-- ============================================================== -->
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">THP/FLP/BHT</h4>
                        <div class="ThpFlpBht" style="height: 400px;"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <!-- column -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">BSW/NetAPI/Uptime</h4>
                        <div class="BswNewtApiUptime" style="height: 400px;"></div>
                    </div>
                </div>
            </div>
            <!-- column -->
            <!-- column -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">GOR Trend</h4>
                        <div class="GORTrend" style="height: 400px;"></div>>
                    </div>
                </div>
            </div>
            <!-- column -->
            <!-- column -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">BSW Trend</h4>
                        <div class="flot-chart">
                            <div class="flot-chart-content" id="BSWTrend"></div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- column -->
            <!-- column -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">PS,PWF,BLPD</h4>
                        <div class="PsPwfBlpd" style="height: 400px;"></div>
                    </div>
                </div>
            </div>
            <!-- column -->

            <div class="col-lg-12">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">OILBOPD,WaterBWPD,GasMSCFD</h4>
                        <div class="flot-chart">
                            <div class="productiontrendchart" style="height: 320px;"> </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">OILBOPD,WaterBWPD,GasMSCFD</h4>
                        <div class="flot-chart">
                            <div class="flot-chart-content" id="productionindicatorchart"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- column -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Choke,Uptime,Frequency</h4>
                        <div class="chokeuptimefreq" style="height: 400px;"></div>
                    </div>
                </div>
            </div>
            <!-- column -->
            <!-- column -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">DP Trend</h4>
                        <div class="flot-chart">
                            <div class="flot-chart-content" id="dpTrend"></div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- column -->
            <!-- column -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Choke, Uptime,PI,NetAPI</h4>
                        <div class="IndicatorCompare" style="height: 400px;"></div>
                    </div>
                </div>
            </div>
            <!-- column -->
        </div>
        <!-- ============================================================== -->
        <!-- End PAge Content -->
        <!-- ============================================================== -->


        @section pagescript
            {

            <script src="~/Content/assets/plugins/flot/excanvas.js"></script>
            <script src="~/Content/assets/plugins/flot/jquery.flot.js"></script>
            <script src="~/Content/assets/plugins/flot/jquery.flot.pie.js"></script>
            <script src="~/Content/assets/plugins/flot/jquery.flot.time.js"></script>
            <script src="~/Content/assets/plugins/flot/jquery.flot.stack.js"></script>
            <script src="~/Content/assets/plugins/flot/jquery.flot.crosshair.js"></script>
            <script src="~/Content/assets/plugins/flot.tooltip/js/jquery.flot.tooltip.min.js"></script>
            <script src="~/Content/js/flot-data.js"></script>
            <!-- chartist chart -->
            <script src="~/Content/assets/plugins/chartist-js/dist/chartist.min.js"></script>
            <script src="~/Content/assets/plugins/chartist-plugin-tooltip-master/dist/chartist-plugin-tooltip.min.js"></script>


            <script type="text/javascript">
                        //Simple line chart
                        var RepLabel =  @Html.Raw(Json.Encode(ViewBag.reportlabel));
                        var THP = @Html.Raw(Json.Encode(ViewBag.THP));
                        var FLP = @Html.Raw(Json.Encode(ViewBag.FLP));
                        var BHT = @Html.Raw(Json.Encode(ViewBag.BHT));
                        var BSW = @Html.Raw(Json.Encode(ViewBag.BSW));
                        var NETAPI = @Html.Raw(Json.Encode(ViewBag.NETAPI));
                        var Uptime = @Html.Raw(Json.Encode(ViewBag.Uptime));
                        var GOR = @Html.Raw(Json.Encode(ViewBag.GOR));
                        var PS = @Html.Raw(Json.Encode(ViewBag.PS));
                        var PWF = @Html.Raw(Json.Encode(ViewBag.PWF));
                        var PI = @Html.Raw(Json.Encode(ViewBag.PI));
                        var BLPD = @Html.Raw(Json.Encode(ViewBag.BLPD));
                        var ChokeSize = @Html.Raw(Json.Encode(ViewBag.ChokeSize));
                        var productionindicatorchart = @Html.Raw(Json.Encode(ViewBag.productionindicatorchart));
                        var donutchart = @Html.Raw(Json.Encode(ViewBag.donutchart));
                        var donutlabel = @Html.Raw(Json.Encode(ViewBag.donutlabel));



                        new Chartist.Line('.BswNewtApiUptime', {
                            labels: RepLabel,
                            series: [
                                BSW,
                                NETAPI,
                                Uptime
                            ]
                        }, {
                                fullWidth: true,

                                plugins: [
                                    Chartist.plugins.tooltip()
                                ],
                                chartPadding: {
                                    right: 40
                                }
                            });

                        // line chart with area

                        new Chartist.Line('.GORTrend', {
                            labels: RepLabel,
                            series: [
                                GOR
                            ]
                        }, {
                                low: 0,

                                plugins: [
                                    Chartist.plugins.tooltip()
                                ],
                                showArea: true
                            });

                        // ct-polar-chart
                        new Chartist.Line('#ct-polar-chart', {
                            labels: [1, 2, 3, 4, 5, 6, 7, 8],
                            series: [
                                [1, 2, 3, 1, -2, 0, 1, 0],
                                [-2, -1, -2, -1, -2.5, -1, -2, -1],
                                [0, 0, 0, 1, 2, 2.5, 2, 1],
                                [2.5, 2, 1, 0.5, 1, 0.5, -1, -2.5]
                            ]
                        }, {
                                high: 3,
                                low: -3,
                                chartPadding: {
                                    left: -20,
                                    top: 10,
                                },
                                showArea: true,
                                showLine: false,
                                showPoint: true,
                                fullWidth: true,
                                plugins: [
                                    Chartist.plugins.tooltip()
                                ],
                                axisX: {
                                    showLabel: true,
                                    showGrid: true
                                },
                                axisY: {
                                    showLabel: false,
                                    showGrid: true
                                }
                            });

                        // ct-animation-chart



                        var chart = new Chartist.Line('.ThpFlpBht', {
                            labels: RepLabel,
                            series: [
                                THP,
                                FLP,
                                BHT
                            ]
                        }, {
                                low: 0
                            });

                        // Let's put a sequence number aside so we can use it in the event callbacks
                        var seq = 0,
                            delays = 80,
                            durations = 500;

                        // Once the chart is fully created we reset the sequence
                        chart.on('created', function () {
                            seq = 0;
                        });

                        // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
                        chart.on('draw', function (data) {
                            seq++;

                            if (data.type === 'line') {
                                // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
                                data.element.animate({
                                    opacity: {
                                        // The delay when we like to start the animation
                                        begin: seq * delays + 1000,
                                        // Duration of the animation
                                        dur: durations,
                                        // The value where the animation should start
                                        from: 0,
                                        // The value where it should end
                                        to: 1
                                    }
                                });
                            } else if (data.type === 'label' && data.axis === 'x') {
                                data.element.animate({
                                    y: {
                                        begin: seq * delays,
                                        dur: durations,
                                        from: data.y + 100,
                                        to: data.y,
                                        // We can specify an easing function from Chartist.Svg.Easing
                                        easing: 'easeOutQuart'
                                    }
                                });
                            } else if (data.type === 'label' && data.axis === 'y') {
                                data.element.animate({
                                    x: {
                                        begin: seq * delays,
                                        dur: durations,
                                        from: data.x - 100,
                                        to: data.x,
                                        easing: 'easeOutQuart'
                                    }
                                });
                            } else if (data.type === 'point') {
                                data.element.animate({
                                    x1: {
                                        begin: seq * delays,
                                        dur: durations,
                                        from: data.x - 10,
                                        to: data.x,
                                        easing: 'easeOutQuart'
                                    },
                                    x2: {
                                        begin: seq * delays,
                                        dur: durations,
                                        from: data.x - 10,
                                        to: data.x,
                                        easing: 'easeOutQuart'
                                    },
                                    opacity: {
                                        begin: seq * delays,
                                        dur: durations,
                                        from: 0,
                                        to: 1,
                                        easing: 'easeOutQuart'
                                    }
                                });
                            } else if (data.type === 'grid') {
                                // Using data.axis we get x or y which we can use to construct our animation definition objects
                                var pos1Animation = {
                                    begin: seq * delays,
                                    dur: durations,
                                    from: data[data.axis.units.pos + '1'] - 30,
                                    to: data[data.axis.units.pos + '1'],
                                    easing: 'easeOutQuart'
                                };

                                var pos2Animation = {
                                    begin: seq * delays,
                                    dur: durations,
                                    from: data[data.axis.units.pos + '2'] - 100,
                                    to: data[data.axis.units.pos + '2'],
                                    easing: 'easeOutQuart'
                                };

                                var animations = {};
                                animations[data.axis.units.pos + '1'] = pos1Animation;
                                animations[data.axis.units.pos + '2'] = pos2Animation;
                                animations['opacity'] = {
                                    begin: seq * delays,
                                    dur: durations,
                                    from: 0,
                                    to: 1,
                                    easing: 'easeOutQuart'
                                };

                                data.element.animate(animations);
                            }
                        });

                        // For the sake of the example we update the chart every time it's created with a delay of 10 seconds
                        chart.on('created', function () {
                            if (window.__exampleAnimateTimeout) {
                                clearTimeout(window.__exampleAnimateTimeout);
                                window.__exampleAnimateTimeout = null;
                            }
                            window.__exampleAnimateTimeout = setTimeout(chart.update.bind(chart), 12000);
                        });

                        // SVG Path animation graph
                        var chart = new Chartist.Line('.chokeuptimefreq', {
                            labels: reportlabel,
                            series: [
                                ChokeSize,
                                PI,
                                BLPD
                            ]
                        }, {
                                low: 0,
                                showArea: true,
                                showPoint: false,
                                fullWidth: true
                            });

                        chart.on('draw', function (data) {
                            if (data.type === 'line' || data.type === 'area') {
                                data.element.animate({
                                    d: {
                                        begin: 2000 * data.index,
                                        dur: 2000,
                                        from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),
                                        to: data.path.clone().stringify(),
                                        easing: Chartist.Svg.Easing.easeOutQuint
                                    }
                                });
                            }
                        });

                        // Bar chart

                        var data = {
                            labels: reportlabel,
                            series: [
                                PS,
                                PWF
                            ]
                        };

                        var options = {
                            seriesBarDistance: 10
                        };

                        var responsiveOptions = [
                            ['screen and (max-width: 640px)', {
                                seriesBarDistance: 5,

                                axisX: {
                                    labelInterpolationFnc: function (value) {
                                        return value[0];
                                    }
                                }
                            }]
                        ];

                        new Chartist.Bar('.PsPwfBlpd', data, options, responsiveOptions);


                        // ct-gauge-chart

                        new Chartist.Pie('.ct-gauge-chart', {
                            series: [20, 10, 30, 40]
                        }, {
                                donut: true,
                                donutWidth: 60,
                                startAngle: 270,
                                total: 200,
                                low: 0,
                                showLabel: false
                            });

                        // Animated Donute chart
                        var chart = new Chartist.Pie('.IndicatorCompare', {
                            series: donutchart,
                            labels: donutlabel
                        }, {
                                donut: true,
                                showLabel: false
                            });

                        chart.on('draw', function (data) {
                            if (data.type === 'slice') {
                                // Get the total path length in order to use for dash array animation
                                var pathLength = data.element._node.getTotalLength();

                                // Set a dasharray that matches the path length as prerequisite to animate dashoffset
                                data.element.attr({
                                    'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'
                                });

                                // Create animation definition while also assigning an ID to the animation for later sync usage
                                var animationDefinition = {
                                    'stroke-dashoffset': {
                                        id: 'anim' + data.index,
                                        dur: 1000,
                                        from: -pathLength + 'px',
                                        to: '0px',
                                        easing: Chartist.Svg.Easing.easeOutQuint,
                                        // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)
                                        fill: 'freeze'
                                    }
                                };

                                // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation
                                if (data.index !== 0) {
                                    animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';
                                }

                                // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us
                                data.element.attr({
                                    'stroke-dashoffset': -pathLength + 'px'
                                });

                                // We can't use guided mode as the animations need to rely on setting begin manually
                                // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate
                                data.element.animate(animationDefinition, false);
                            }
                        });

                        // For the sake of the example we update the chart every time it's created with a delay of 8 seconds
                        chart.on('created', function () {
                            if (window.__anim21278907124) {
                                clearTimeout(window.__anim21278907124);
                                window.__anim21278907124 = null;
                            }
                            window.__anim21278907124 = setTimeout(chart.update.bind(chart), 10000);
                        });

            </script>

            <script type="text/javascript">
                        /*
Template Name: ERAS
Author: Harrison.Uhunghama
Email: harrison.uhunghama@oriental-er.com
File: js
*/
                        var DPTrendData; = @Html.Raw(ViewBag.DPTrendData);
                        var GasMSCFDData; = @Html.Raw(ViewBag.GasMSCFDData);
                        var WaterBWPDData; = @Html.Raw(ViewBag.WaterBWPDData);
                        var OILBOPDData; = @Html.Raw(ViewBag.OILBOPDData);
                        var BSWTrend; = @Html.Raw(ViewBag.BSWTrend);
                        var productionindicatorchart; = @Html.Raw(ViewBag.productionindicatorchart);
                        // Real Time chart
                        var data = []
                            , totalPoints = 300;

                        function getRandomData() {
                            if (data.length > 0) data = data.slice(1);
                            // Do a random walk
                            while (data.length < totalPoints) {
                                var prev = data.length > 0 ? data[data.length - 1] : 50
                                    , y = prev + Math.random() * 10 - 5;
                                if (y < 0) {
                                    y = 0;
                                }
                                else if (y > 100) {
                                    y = 100;
                                }
                                data.push(y);
                            }
                            // Zip the generated y values with the x values
                            var res = [];
                            for (var i = 0; i < data.length; ++i) {
                                res.push([i, data[i]])
                            }
                            return res;
                        }
                        // Set up the control widget
                        var updateInterval = 30;
                        $("#updateInterval").val(updateInterval).change(function () {
                            var v = $(this).val();
                            if (v && !isNaN(+v)) {
                                updateInterval = +v;
                                if (updateInterval < 1) {
                                    updateInterval = 1;
                                }
                                else if (updateInterval > 3000) {
                                    updateInterval = 3000;
                                }
                                $(this).val("" + updateInterval);
                            }
                        });
                        var plot = $.plot("#placeholder", [getRandomData()], {
                            series: {
                                shadowSize: 0 // Drawing is faster without shadows
                            }
                            , yaxis: {
                                min: 0
                                , max: 100
                            }
                            , xaxis: {
                                show: false
                            }
                            , colors: ["#26c6da"]
                            , grid: {
                                color: "#AFAFAF"
                                , hoverable: true
                                , borderWidth: 0
                                , backgroundColor: '#FFF'
                            }
                            , tooltip: true
                            , tooltipOpts: {
                                content: "Y: %y"
                                , defaultTheme: false
                            }
                        });

                        function update() {
                            plot.setData([getRandomData()]);
                            // Since the axes don't change, we don't need to call plot.setupGrid()
                            plot.draw();
                            setTimeout(update, updateInterval);
                        }
                        update();
                        //Flot Line Chart
                        $(document).ready(function () {
                            console.log("document ready");
                            var offset = 0;
                            plot();

                            function plot() {
                                var sin = []
                                    , cos = [];
                                for (var i = 0; i < 12; i += 0.2) {
                                    sin.push([i, Math.sin(i + offset)]);
                                    cos.push([i, Math.cos(i + offset)]);
                                }
                                var options = {
                                    series: {
                                        lines: {
                                            show: true
                                        }
                                        , points: {
                                            show: true
                                        }
                                    }
                                    , grid: {
                                        hoverable: true //IMPORTANT! this is needed for tooltip to work
                                    }
                                    , yaxis: {
                                        min: -1.2
                                        , max: 1.2
                                    }
                                    , colors: ["#009efb", "#26c6da"]
                                    , grid: {
                                        color: "#AFAFAF"
                                        , hoverable: true
                                        , borderWidth: 0
                                        , backgroundColor: '#FFF'
                                    }
                                    , tooltip: true
                                    , tooltipOpts: {
                                        content: "'%s' of %x.1 is %y.4"
                                        , shifts: {
                                            x: -60
                                            , y: 25
                                        }
                                    }
                                };
                                var plotObj = $.plot($("#flot-line-chart"), [{
                                    data: sin
                                    , label: "sin(x)"
                                    ,
                                }, {
                                    data: cos
                                    , label: "cos(x)"
                                }], options);
                            }
                        });
                        //Flot Pie Chart
                        $(function () {
                            var data = productionindicatorchart;
                            var plotObj = $.plot($("#productionindicatorchart"), data, {
                                series: {
                                    pie: {
                                        innerRadius: 0.5
                                        , show: true
                                    }
                                }
                                , grid: {
                                    hoverable: true
                                }
                                , color: null
                                , tooltip: true
                                , tooltipOpts: {
                                    content: "%p.0%, %s", // show percentages, rounding to 2 decimal places
                                    shifts: {
                                        x: 20
                                        , y: 0
                                    }
                                    , defaultTheme: false
                                }
                            });
                        });
                        //Flot Moving Line Chart
                        $(function () {
                            var container = $("#BSWTrend");
                            // Determine how many data points to keep based on the placeholder's initial size;
                            // this gives us a nice high-res plot while avoiding more than one point per pixel.
                            var maximum = container.outerWidth() / 2 || 300;

                            series = [{
                                data: BSWTrend
                                , lines: {
                                    fill: true
                                }
                            }];
                            //
                            var plot = $.plot(container, series, {
                                colors: ["#26c6da"]
                                , grid: {
                                    borderWidth: 0
                                    , minBorderMargin: 20
                                    , labelMargin: 10
                                    , backgroundColor: {
                                        colors: ["#fff", "#fff"]
                                    }
                                    , margin: {
                                        top: 8
                                        , bottom: 20
                                        , left: 20
                                    }
                                    , markings: function (axes) {
                                        var markings = [];
                                        var xaxis = axes.xaxis;
                                        for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 1) {
                                            markings.push({
                                                xaxis: {
                                                    from: x
                                                    , to: x + xaxis.tickSize
                                                }
                                                , color: "#fff"
                                            });
                                        }
                                        return markings;
                                    }
                                }
                                , xaxis: {
                                    tickFormatter: function () {
                                        return "";
                                    }
                                }
                                , yaxis: {
                                    min: 0
                                    , max: 110
                                }
                                , legend: {
                                    show: true
                                }
                            });
                            // Update the random dataset at 25FPS for a smoothly-animating chart
                            setInterval(function updateRandom() {
                                series[0].data = getRandomData();
                                plot.setData(series);
                                plot.draw();
                            }, 40);
                        });
                        //Flot Bar Chart
                        $(function () {
                            var barOptions = {
                                series: {
                                    bars: {
                                        show: true
                                        , barWidth: 43200000
                                    }
                                }
                                , xaxis: {
                                    mode: "time"
                                    , timeformat: "%m/%d"
                                    , minTickSize: [2, "day"]
                                }
                                , grid: {
                                    hoverable: true
                                }
                                , legend: {
                                    show: false
                                }
                                , grid: {
                                    color: "#AFAFAF"
                                    , hoverable: true
                                    , borderWidth: 0
                                    , backgroundColor: '#FFF'
                                }
                                , tooltip: true
                                , tooltipOpts: {
                                    content: "x: %x, y: %y"
                                }
                            };
                            var barData = {
                                label: "bar"
                                , color: "#009efb"
                                , data: DPTrendData
                            };
                            $.plot($("#dpTrend"), [barData], barOptions);
                        });
                        // sales bar chart
                        $(function () {
                            //some data
                            var d1 = OILBOPDData;
                            var d2 = WaterBWPDData;
                            var d3 = GasMSCFDData;
                            var ds = new Array();
                            ds.push({
                                label: "Oil BOPD"
                                , data: d1
                                , bars: {
                                    order: 1
                                }
                            });
                            ds.push({
                                label: "Water BWPD"
                                , data: d2
                                , bars: {
                                    order: 2
                                }
                            });
                            ds.push({
                                label: "Gas MSCFD"
                                , data: d3
                                , bars: {
                                    order: 3
                                }
                            });
                            var stack = 0
                                , bars = true
                                , lines = true
                                , steps = true;
                            var options = {
                                bars: {
                                    show: true
                                    , barWidth: 0.2
                                    , fill: 1
                                }
                                , grid: {
                                    show: true
                                    , aboveData: false
                                    , labelMargin: 5
                                    , axisMargin: 0
                                    , borderWidth: 1
                                    , minBorderMargin: 5
                                    , clickable: true
                                    , hoverable: true
                                    , autoHighlight: false
                                    , mouseActiveRadius: 20
                                    , borderColor: '#f5f5f5'
                                }
                                , series: {
                                    stack: stack
                                }
                                , legend: {
                                    position: "ne"
                                    , margin: [0, 0]
                                    , noColumns: 0
                                    , labelBoxBorderColor: null
                                    , labelFormatter: function (label, series) {
                                        // just add some space to labes
                                        return '' + label + '&nbsp;&nbsp;';
                                    }
                                    , width: 30
                                    , height: 5
                                }
                                , yaxis: {
                                    tickColor: '#f5f5f5'
                                    , font: {
                                        color: '#bdbdbd'
                                    }
                                }
                                , xaxis: {
                                    tickColor: '#f5f5f5'
                                    , font: {
                                        color: '#bdbdbd'
                                    }
                                }
                                , colors: ["#4F5467", "#009efb", "#26c6da"]
                                , tooltip: true, //activate tooltip
                                tooltipOpts: {
                                    content: "%s : %y.0"
                                    , shifts: {
                                        x: -30
                                        , y: -50
                                    }
                                }
                            };
                            $.plot($(".productiontrendchart"), ds, options);
                        });
            </script>
        }
